{"version":3,"sources":["utils/SpotifyServiceTools.js","utils/SpotifyService.js","components/hud/HUDButton.js","components/hud/HUDSearchBar.js","utils/StringTools.js","components/hud/SpotifySong.js","pages/hud/HUDSongSearchMenu.js","pages/hud/HUDMainMenu.js","utils/TransitionUtils.js","components/transition/GenericTransitionWrapper.js","components/transition/FadeTransition.js","components/transition/SlideTransition.js","pages/hud/HUDSongSelectMenu.js","utils/HUDOverlayManager.js","pages/App.js","index.js"],"names":["log","state","body","message","notifier","notification","next","console","getTokensFromQuery","urlParams","URLSearchParams","window","location","search","accessToken","get","refreshToken","processTokens","refreshTokenFunction","stateNotifier","queryTokens","localStorage","setItem","localStorageRefreshToken","getItem","then","json","DEBUG_URL","SpotifyService","spotifyPlayerName","$cdn","Rx","BehaviorSubject","$sdk","$token","$spotifyServiceStateNotifier","ReplaySubject","combineLatest","cdnLoaded","sdkLoaded","tokenLoaded","filter","isAllLoaded","subscribe","player","Player","Spotify","callback","connect","addListener","device_id","initPlayer","this","getNewAccessToken","notif","newState","name","spotifyStateNotifier","fromCDN","onSpotifyWebPlaybackSDKReady","tokenToBeUsed","fetch","response","catch","error","getCurrentState","play","track_window","current_track","next_track","togglePlay","uri","Error","spotifyURI","getOAuthToken","id","access_token","details","JSON","stringify","searchQueryString","index","type","limit","url","header","err","analysisURL","featuresURL","audioAnalysis","audioFeatures","analysisObject","featuresObject","HUDButtonTypesEnum","Object","freeze","HUDButton","props","text","onClick","filteredType","values","findIndex","element","SMALL","className","event","buttonType","defaultProps","HUDSearchBar","lastSubmittedValue","autoSearchTimer","handleChange","bind","handleSubmit","clearTimeout","setTimeout","submissionTimeoutDelay","setState","target","value","searchSongsWithQuery","string","letters","trim","match","words","curWord","forEach","letter","length","push","wordsToArray","onKeyUp","keyEvent","keyCode","placeholder","onChange","ENTER","Component","query","SpotifySong","imgURL","artist","handleClick","sizeClassName","size","src","alt","arr","str","renderArtistArray","HUDSongSearchMenu","spotifyService","filterReceivedJSON","items","dotProp","newTrackArray","map","item","img","createTrackObject","songList","hasSearched","song","key","selectSong","input","renderSongList","RETURN","onReturn","HUDMainMenu","hasLoggedIn","onSongSelectRequest","onLoginRequest","onAboutPageRequest","onLeaderboardsPageRequest","spotifyLoginButton","selectSongButton","aboutButton","leaderboardsButton","mainButton","TransitionEnums","Transition","subject","IN","OUT","GenericTransitionWrapper","transitionRequestObservable","shouldMountIn","delay","msg","position","handleTransitionStart","handleTransitionEnd","onMount","onStartTransitionIn","onStartTransitionOut","onEndTransitionIn","onEndTransitionOut","style","currentStyle","onTransitionEnd","children","FadeTransition","mountHandler","SlideTransition","HUDSongSelectMenu","songObject","onConfirmation","HUDOverlayManager","gameStateManager","mountSongSearchMenu","mountSongSelectMenu","popMenu","transitionObservable","Subject","prevScreenTransitionObservable","songSearchMenu","oldState","menuStack","getAudioAnalysisAndFeatures","object","oldStack","pop","login","errorComponent","APP_NAME","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2070d948.chunk.js","sourcesContent":["// key for accessing local storage data\nconst LOCAL_STORAGE_KEY = \"spotify-refresh-token\";\n\n/**\n * Either console logs or broadcasts a state message.\n *\n * @param {String} state current spotify service state\n * @param {*} body the body of the notification. Could be anything depending on the state.\n * @param {String} message optional message to be notified\n * @param {Rx.Subject} notifier the observable to emit the message from\n *\n * @returns {void}\n */\nconst log = (state, body, message = \"\", notifier = null) => {\n\n    const notification = {\n        \"source\": \"SpotifyService\",\n        state,\n        body,\n        message\n    };\n\n    // broadcast state\n    if (notifier) notifier.next(notification);\n    else console.log(notification);\n\n};\n\n/**\n * Fetches tokens from URL query and returns them in an object.\n * @returns {{accessToken: *, refreshToken: *}} object containing both tokens\n */\nconst getTokensFromQuery = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const accessToken = urlParams.get(\"accessToken\");\n    const refreshToken = urlParams.get(\"refreshToken\");\n\n    return {\n        accessToken,\n        refreshToken\n    };\n};\n\n/**\n * Returns refresh and access tokens if a valid refresh token is found either in the query or local storage.\n * If no valid refresh token exists, returned tokens will be \"null\".\n * @param {Function} refreshTokenFunction function that fetches refresh tokens from server.\n * @param {Rx.Subject} stateNotifier an optional Subject that will be used to broadcast state of the utility\n * @returns {{accessToken: *, refreshToken: *}} object containing both tokens\n */\nconst processTokens = (refreshTokenFunction, stateNotifier = null) => {\n\n    // Handle state of SDK and user token\n    const queryTokens = getTokensFromQuery();\n\n    let accessToken = null;\n    let refreshToken = null;\n\n    // check if refresh token exists in local storage, or else check query\n    if (queryTokens.accessToken && queryTokens.refreshToken) {\n\n        // set state tokens\n        accessToken = queryTokens.accessToken;\n        refreshToken = queryTokens.refreshToken;\n\n        // update state\n        log(\"ACCESS_TOKEN_ACQUIRED\", {\n            accessToken,\n            refreshToken\n        }, \"Using tokens from query returned from server!\", stateNotifier);\n\n        // save token locally if it was found\n        localStorage.setItem(LOCAL_STORAGE_KEY, queryTokens.refreshToken);\n\n    } else {\n\n        // this is the case when query tokens don't exist\n        log(\"LOADING_TOKEN_FROM_LOCAL_STORAGE\", null, \"Spotify tokens not found in query. Looking in local storage...\", stateNotifier);\n\n        const localStorageRefreshToken = localStorage.getItem(LOCAL_STORAGE_KEY);\n\n        // if found, attempt to refresh\n        if (localStorageRefreshToken) {\n\n            log(\n            \"REFRESHING_TOKEN\",\n                null,\n                \"Spotify refresh token found in localStorage. Fetching new accessToken from server...\",\n                stateNotifier\n            );\n\n            refreshTokenFunction(localStorageRefreshToken)\n                .then(json => {\n\n                    log(\n                        \"ACCESS_TOKEN_ACQUIRED\",\n                        {\n                            \"accessToken\": json.accessToken,\n                            \"refreshToken\": localStorageRefreshToken\n                        },\n                        \"Spotify access token fetched.\",\n                        stateNotifier\n                    );\n\n                });\n\n        } else {\n\n            log(\n                \"NO_ACCESS_TOKEN\",\n                null,\n                \"No tokens found or refreshed. User must log in.\",\n                stateNotifier\n            );\n\n        }\n    }\n};\n\nexport {\n    getTokensFromQuery,\n    processTokens,\n    log\n};","import fromCDN from \"from-cdn\";\nimport Rx from \"rxjs\";\nimport {processTokens, log} from \"./SpotifyServiceTools\";\n\n// url for react debugging on node server (comment out for building in production)\nconst DEBUG_URL = \"http://localhost:8080\";\n\n\n/**\n * Service that handles client-side handling of Spotify communications.\n */\nclass SpotifyService {\n\n\t// Must have a reference to SDK so playback functions can be called.\n\tconstructor (spotifyPlayerName) {\n\n\t\t// keep track of all three initializations\n\t\tconst $cdn = new Rx.BehaviorSubject(false);\n\t\tconst $sdk = new Rx.BehaviorSubject(false);\n\t\tconst $token = new Rx.BehaviorSubject(false);\n\n\t\t/*\n\t\t * spotify service observable\n\t\t * subject that notifies of all state changes within this module.\n\t\t */\n\t\tconst $spotifyServiceStateNotifier = new Rx.ReplaySubject();\n\n\t\t// does all necessary initialization\n\t\tconst initPlayer = () => {\n\n\t\t\t// if this is running again after initialization, quit.\n\t\t\tif (this.player) return;\n\n\t\t\tconst {Player} = window.Spotify;\n\n\t\t\t/*\n\t\t\t * todo: may extract this to a separate func\n\t\t\t * Initialize player\n\t\t\t */\n\t\t\tthis.player = new Player({\n\t\t\t\t\"name\": \"tune mountain\",\n\t\t\t\t\"getOAuthToken\": callback => callback(this.accessToken),\n\t\t\t\t\"volume\": 0.5\n\t\t\t});\n\n\t\t\tthis.player.connect();\n\n\t\t\t// noinspection JSDeprecatedSymbols\n\t\t\tthis.player.addListener(\"ready\", ({device_id}) => {\n\t\t\t\tlog(\"PLAYER_READY\", `Spotify player ready to stream songs on ${device_id}`, $spotifyServiceStateNotifier);\n\t\t\t});\n\n\t\t\t// TODO: add listener for error and automatically refresh token\n\n\t\t};\n\n\t\t// only init spotify player/service once all three parts are done with their processes\n\t\t$cdn.combineLatest(\n\t\t\t$sdk,\n\t\t\t$token,\n\t\t\t(cdnLoaded, sdkLoaded, tokenLoaded) => cdnLoaded && sdkLoaded && tokenLoaded\n\t\t)\n\t\t\t.filter(isAllLoaded => isAllLoaded)\n\t\t\t.subscribe(() => {\n\t\t\t\tlog(\"LOGGED_IN\", null, \"User has logged in.\", $spotifyServiceStateNotifier);\n\t\t\t\tinitPlayer();\n\t\t\t});\n\n\t\t// process tokens and collect notifications from it\n\t\tprocessTokens(this.getNewAccessToken, $spotifyServiceStateNotifier);\n\n\t\t// save tokens when they're acquired\n        $spotifyServiceStateNotifier\n            .filter(notif => notif.state === \"ACCESS_TOKEN_ACQUIRED\")\n            .subscribe(newState => {\n\n                // get tokens from update\n                const {\n                    accessToken,\n                    refreshToken\n                } = newState.body;\n\n                this.accessToken = accessToken;\n                this.refreshToken = refreshToken;\n\n                if (accessToken && refreshToken) $token.next(true);\n                else $token.next(false);\n\n            });\n\n\t\tthis.name = spotifyPlayerName;\n\t\tthis.player = null;\n\t\tthis.spotifyStateNotifier = $spotifyServiceStateNotifier;\n\n\t\t// Load sdk, update state\n\t\tfromCDN([\"https://sdk.scdn.co/spotify-player.js\"])\n\t\t\t.then(() => {\n\t\t\t\t$cdn.next(true);\n\t\t\t});\n\n\t\twindow.onSpotifyWebPlaybackSDKReady = () => $sdk.next(true);\n\n\t\tthis.spotifyStateNotifier = $spotifyServiceStateNotifier;\n\n\t}\n\n\t/**\n\t * Getter for Rx.Subject that notifies state of this module to rest of the app.\n\t * @returns {Subject} Rx Observable that emits state updates.\n\t */\n\tget stateNotifier() {\n\t\treturn this.spotifyStateNotifier;\n\t}\n\n\t/**\n\t * Refreshes the user token.\n\t * @param {String} refreshToken refresh token received from Spotify\n\t * @returns {JSON} JSON returned from query.\n\t */\n\tgetNewAccessToken(refreshToken = null) {\n\n\t\tconst tokenToBeUsed = refreshToken ? refreshToken : this.refreshToken;\n\n\t\treturn fetch(`${DEBUG_URL ? DEBUG_URL : \"\"}/spotify-service/refresh-token/${tokenToBeUsed}`)\n\t\t\t.then(response => response.json())\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error);\n\t\t\t});\n\n\t}\n\n\t/**\n\t * Plays/pauses playback on local spotify player.\n\t * @returns {void}\n\t */\n\ttogglePlayback() {\n\n\t\tthis.player.getCurrentState().then(state => {\n\t\t\tif (!state) {\n\t\t\t\tconsole.error(\"User is not playing music through the Web Playback SDK\");\n\n\t\t\t\tthis.play();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\tcurrent_track,\n\t\t\t\t\"next_tracks\": [next_track]\n\t\t\t} = state.track_window;\n\n\t\t\tconsole.log(\"Currently Playing\", current_track);\n\t\t\tconsole.log(\"Playing Next\", next_track);\n\t\t});\n\n\t\tthis.player.togglePlay();\n\n\t}\n\n\t/**\n\t * Plays a song on the current active player with a given spotify URI.\n\t * @param {String} uri the Spotify URI of the song. Can be acquired through search params.\n\t * @returns {void}\n\t */\n\tplay(uri) {\n\n\t\tif (!this.player) throw new Error(\"Player not initialized.\");\n\n\t\tconst play = ({\n\t\t\tspotifyURI,\n\t\t\t\"playerInstance\": {\n\t\t\t\t\"_options\": {\n\t\t\t\t\tgetOAuthToken,\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t}\n\t\t}) => {\n\t\t\tgetOAuthToken(access_token => {\n\t\t\t\tconst details = {\n\t\t\t\t\t\"method\": \"PUT\",\n\t\t\t\t\t\"headers\": {\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t\"Authorization\": `Bearer ${access_token}`\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tif (spotifyURI) {\n\t\t\t\t\tdetails.body = JSON.stringify({\"uris\": [spotifyURI]});\n\t\t\t\t}\n\n\t\t\t\tfetch(\n\t\t\t\t`https://api.spotify.com/v1/me/player/play?device_id=${id}`,\n\t\t\t\t\tdetails\n\t\t\t\t).then(() => console.log(`Success: Playing uri: ${spotifyURI}`));\n\t\t\t});\n\t\t};\n\n\t\t// run the function\n\t\tplay({\n\t\t\t\"playerInstance\": this.player,\n\t\t\t\"spotifyURI\": uri\n\t\t});\n\n\t}\n\n\t/**\n\t * Redirects application to accounts.spotify.com web page for login.\n\t * @returns {void}\n\t */\n\tlogin() {\n\n\t\tconsole.log(\"Redirecting to Spotify for authorization...\");\n\t\twindow.location = `${DEBUG_URL ? DEBUG_URL : \"\"}/spotify-service/login`;\n\n\t}\n\n\t/**\n\t * Searches spotify servers using the passed keywords in any order (without quotations on query).\n\t * Returns tracks on the State updater using the state keyword TRACKS_FETCHED; if a callback function is\n\t * passed, the returned JSON object is passed as the only argument in the callback function.\n\t *\n\t * @param {Function} callback an optional callback function whose argument will be the JSON object containing the songs\n\t * @param {...String} keywords one or more strings to be used in the query parameter.\n\t * @returns {void} return values are emitted on Subject or passed to callback\n\t */\n\tsearch(callback = null, ...keywords) {\n\n\t\t// 1: filter keywords into a query string\n\t\tlet searchQueryString = \"q=\";\n\t\tfor (let index = 0; index < keywords.length; index++) {\n\n\t\t\t// append keyword\n\t\t\tsearchQueryString += keywords[index];\n\n\t\t\t// add &20 between keywords if not last item\n\t\t\tsearchQueryString += index + 1 === keywords.length ? \"\" : \"&20\";\n\n\t\t}\n\n\t\t// other filtering parameters\n\t\tconst type = \"type=track\";\n\t\tconst limit = \"limit=8\";\n\n\t\t// 2: define GET parameters and headers\n\t\tconst url = `https://api.spotify.com/v1/search?${searchQueryString}&${type}&${limit}`;\n\t\tconst header = {\n\t\t\t\"method\": \"GET\",\n\t\t\t\"headers\": {\n\t\t\t\t\"Accept\": \"application/json\",\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"Authorization\": `Bearer ${this.accessToken}`\n\t\t\t}\n\t\t};\n\n\t\t// 3: emit result in callback and subject\n\t\tfetch(url, header)\n\t\t\t.then(response => response.json())\n\t\t\t.then(json => {\n\n\t\t\t\t// emit\n\t\t\t\tlog(\n\t\t\t\t\t\"TRACKS_FETCHED\",\n\t\t\t\t\tjson,\n\t\t\t\t\t\"Choose any of these songs...\",\n\t\t\t\t\tthis.spotifyStateNotifier\n\t\t\t\t);\n\n\t\t\t\t// callback\n\t\t\t\t// eslint-disable-next-line callback-return\n\t\t\t\tif (callback) callback(json);\n\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tthrow new Error(err);\n\t\t\t});\n\n\t}\n\n\t/**\n\t * Returns through callback an object containing \"audioFeatures\" and \"audioAnalysis\" for a given\n\t * track ID.\n\t * @param id a spotify track id\n\t * @param callback callback function for handling features and analysis\n\t */\n\tgetAudioAnalysisAndFeatures(id, callback) {\n\n\t\tconst analysisURL = `https://api.spotify.com/v1/audio-analysis/${id}`;\n\t\tconst featuresURL = `https://api.spotify.com/v1/audio-features/${id}`;\n\n\t\tconst header = {\n\t\t\t\"method\": \"GET\",\n\t\t\t\"headers\": {\n\t\t\t\t\"Accept\": \"application/json\",\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"Authorization\": `Bearer ${this.accessToken}`\n\t\t\t}\n\t\t};\n\n\t\tlet audioAnalysis = null;\n\t\tlet audioFeatures = null;\n\n\t\tfetch(analysisURL, header)\n\t\t\t.then(response => response.json())\n\t\t\t.then(analysisObject => {\n\t\t\t\taudioAnalysis = analysisObject;\n\n\t\t\t\treturn fetch(featuresURL, header);\n\t\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(featuresObject => {\n\t\t\t\taudioFeatures = featuresObject;\n\n\t\t\t\tif (callback) {\n\n\t\t\t\t\t// eslint-disable-next-line callback-return\n\t\t\t\t\tcallback({\n\t\t\t\t\t\taudioFeatures,\n\t\t\t\t\t\taudioAnalysis\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t\t// emit\n\t\t\t\tlog(\n\t\t\t\t\t\"METADATA_FECHED\",\n\t\t\t\t\t{\n\t\t\t\t\t\taudioFeatures,\n\t\t\t\t\t\taudioAnalysis\n\t\t\t\t\t},\n\t\t\t\t\t\"Metadata available.\",\n\t\t\t\t\tthis.spotifyStateNotifier\n\t\t\t\t);\n\n\t\t\t})\n\t\t\t.catch(error => console.error(error));\n\t}\n\n}\n\nexport default SpotifyService;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../../css/hud/HUDButton.css\";\n\n/**\n * Enumeration that defines types of button CSS layouts supported. Buttons instantiated without\n * a type will default to SMALL.\n * This value is emitted along with the original click event.\n * @type {Readonly<{RETURN: string, SMALL: string, LARGE: string, ENTER: string}>}\n */\nexport const HUDButtonTypesEnum = Object.freeze({\n    \"SMALL\": \"hud-button-small\",\n    \"LARGE\": \"hud-button-large\",\n    \"RETURN\": \"hud-button-return\",\n    \"ENTER\": \"hud-button-enter\"\n});\n\n/**\n * Wrapper for HTML Button element. Sanitizes button text and has preset styles.\n * Emits button type on click.\n *\n * @param {Object} props React properties\n * @returns {React.Component} JSX element\n * @constructor\n */\nconst HUDButton = props => {\n\n    // props\n    const {\n        type,\n        text,\n        onClick\n    } = props;\n\n    // check if passed type exists\n    const classes = Object.values(HUDButtonTypesEnum);\n    const isValidType = classes.findIndex(element => element === type) !== -1;\n    const filteredType = isValidType ? type : HUDButtonTypesEnum.SMALL;\n\n    // return jsx\n    return (\n        <button\n            className={`${filteredType} hud-button`}\n            onClick={(event => {\n                event.buttonType = filteredType;\n                onClick(event);\n            })}\n        >\n            {text}\n        </button>\n    );\n\n};\n\n// prop types for development\nHUDButton.propTypes = {\n    \"type\": PropTypes.string,\n    \"text\": PropTypes.string,\n    \"onClick\": PropTypes.func\n};\n\n// default props\nHUDButton.defaultProps = {\n    \"type\": HUDButtonTypesEnum.SMALL,\n    \"text\": \"Button Text Not Set\",\n    \"onClick\": () => console.error(\"Click handler not set for this button.\")\n};\n\nexport default HUDButton;","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport HUDButton, {HUDButtonTypesEnum} from \"./HUDButton\";\nimport {wordsToArray} from \"../../utils/StringTools\";\nimport \"../../css/hud/HUDSongSearch.css\";\n\nclass HUDSearchBar extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            \"value\": \"\"\n        };\n        this.lastSubmittedValue = null;\n\n        this.autoSearchTimer = null;\n\n        // function bindings\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    /**\n     * Updates the text in the text box and resets the auto-search timer.\n     * @param {Event} event event of a key being pressed\n     * @returns {void}\n     */\n    handleChange(event) {\n\n        // if timer has been set, clear it and reset it.\n        if (this.autoSearchTimer) clearTimeout(this.autoSearchTimer);\n        this.autoSearchTimer = setTimeout(this.handleSubmit, this.props.submissionTimeoutDelay);\n\n        this.setState({\"value\": event.target.value});\n\n    }\n\n    /**\n     * Filters text in box into an array of words (also getting rid of illegal symbols)\n     * and runs handler function passing it such array.\n     * @returns {void}\n     */\n    handleSubmit() {\n\n        // do not search if nothing is in text box\n        if (this.state.value === \"\") return;\n\n        // only submit if the value has changed\n        if (this.state.value !== this.lastSubmittedValue) {\n\n            this.props.searchSongsWithQuery(wordsToArray(this.state.value));\n            this.lastSubmittedValue = this.state.value;\n\n        }\n\n    }\n\n    render() {\n        return(\n            <div\n                className=\"search-bar-container\"\n                onKeyUp={keyEvent => {\n                    if (keyEvent.keyCode === 13) this.handleSubmit();\n                }}\n            >\n                <input\n                    className=\"text-box\"\n                    placeholder={this.props.placeholder}\n                    type=\"text\" value={this.state.value}\n                    onChange={this.handleChange}\n                />\n                <HUDButton type={HUDButtonTypesEnum.ENTER}\n                           text=\"Search\"\n                           onClick={this.handleSubmit}\n                />\n            </div>\n        );\n    }\n\n}\n\n// default props\nHUDSearchBar.defaultProps = {\n    \"searchSongsWithQuery\": query => {\n        throw new Error(`Unable to search song with query ${query}. No handler passed.`);\n    },\n    \"placeholder\": \"Type the name of a song...\",\n    \"submissionTimeoutDelay\": 2000\n};\n\n// prop type constraints\nHUDSearchBar.propTypes = {\n    \"searchSongsWithQuery\": PropTypes.func,\n    \"placeholder\": PropTypes.string,\n    \"submissionTimeoutDelay\": PropTypes.number\n};\n\nexport default HUDSearchBar;","/**\n * Converts a paragraph to an array of words, removing any symbols so that\n * no wacky HTTP GET requests are done to Spotify.\n *\n * @param {String} string the input string.\n * @returns {Array<String>} an array of the words passed to the function.\n */\nconst wordsToArray = string => {\n\n    // trim whitespace before and after\n    const paragraph = string.trim();\n\n    // eslint-disable-next-line require-unicode-regexp\n    const regex = /[A-Za-z0-1 ]/g;\n\n    // filter symbols\n    const letters = paragraph.match(regex);\n\n    const words = [];\n    let curWord = \"\";\n\n    // join letters and remove whitespace\n    letters.forEach((letter, index) => {\n        if (letter === \" \") {\n            if (curWord.length > 0) words.push(curWord);\n            curWord = \"\";\n        } else {\n            curWord += letter;\n            if (index + 1 === letters.length) words.push(curWord);\n        }\n    });\n\n    return words;\n\n};\n\nexport {\n    wordsToArray\n};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../../css/hud/SpotifySong.css\";\n\n/**\n * React element for rendering a song and handling clicks on that element to select a song.\n *\n * Two styles are supported. Props.size can be either \"small\" or \"large\"\n * @param {Object} props react properties\n * @constructor\n */\nconst SpotifySong = props => {\n\n    const {\n        name,\n        id,\n        imgURL,\n        artist,\n        handleClick,\n        size\n    } = props;\n\n    const sizeClassName = size === \"small\" ? \"song-container-small\" : \"song-container-large\";\n\n    const renderArtistArray = arr => {\n\n        let str = \"\";\n\n        arr.forEach((artist, index) => {\n           str += artist;\n           str += index + 1 === arr.length ? \"\" : \", \";\n        });\n\n        return str;\n    };\n\n    return (\n        <div className={`${sizeClassName} song-container`} onClick={() => handleClick({\n            name,\n            id,\n            imgURL,\n            artist\n        })}>\n            <img className=\"song-image\" src={imgURL} alt={`Album cover for song ${name} by artist ${artist}`}/>\n            <div className=\"song-data-container\">\n                <h1 className=\"song-name\">{name}</h1>\n                <h2 className=\"song-artist\">{renderArtistArray(artist)}</h2>\n            </div>\n        </div>\n    );\n\n};\n\nSpotifySong.defaultProps = {\n    \"name\": \"No Song Name Assigned\",\n    \"id\": \"No ID Passed\",\n    \"imgURL\": \"No image URL passed\",\n    \"artist\": \"No Artist\",\n    \"handleClick\": () => {\n        throw new Error(\"No click handler passed\");\n    },\n    \"size\": \"small\"\n};\n\nSpotifySong.propTypes = {\n    \"name\": PropTypes.string,\n    \"id\": PropTypes.string,\n    \"imgURL\": PropTypes.string,\n    \"artist\": PropTypes.array,\n    \"handleClick\": PropTypes.func,\n    \"size\": PropTypes.string\n};\n\nexport default SpotifySong;","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport dotProp from \"dot-prop\";\nimport HUDSearchBar from \"../../components/hud/HUDSearchBar\";\nimport SpotifySong from \"../../components/hud/SpotifySong\";\nimport \"../../css/hud/HUDSongSearch.css\";\nimport HUDButton, {HUDButtonTypesEnum} from \"../../components/hud/HUDButton\";\n\nconst MSG_IDENTIFIER = \"message\";\n\n/**\n * Component responsible for rendering a search bar, and requesting\n * the Spotify service to search for songs.\n */\nclass HUDSongSearchMenu extends Component {\n\n    constructor(props) {\n        super(props);\n\n        if (!props.spotifyService) throw new Error(\"HUDSearchMenu requires a reference to an instance of SpotifyService!\");\n\n        // save a reference to spotify service & state notifier\n        this.spotifyService = props.spotifyService;\n\n        // contains list of songs to be rendered\n        this.state = {\n            \"songList\": [],\n            \"hasSearched\": false\n        };\n\n        // bind functions\n        this.filterReceivedJSON = this.filterReceivedJSON.bind(this);\n    }\n\n    /**\n     * To be used as a callback (or subscription handler) for when a user searches\n     * for a set of keywords. This function filters the received object and strips it of\n     * unnecessary parameters.\n     *\n     * @param {Object} json the Spotify server response.\n     * @returns {void} new array of songs is updated to the state\n     */\n    filterReceivedJSON(json) {\n\n        // destructure tracks into array of items\n        const items = dotProp.get(json, \"tracks.items\");\n        if (!items) throw new Error(\"No items found in search response!\");\n\n        // for each item, collect URI, song name, artist name, album image\n        // eslint-disable-next-line max-params\n        const createTrackObject = (id, name, artist, img) => ({\n            name,\n            artist,\n            img,\n            id\n        });\n\n        const newTrackArray = items.map(item => {\n\n            const id = item.id;\n            const songName = item.name;\n            const artistNames = dotProp.get(item, \"artists\").map(artist => artist.name);\n            const imgURL = dotProp.get(item, \"album.images\")[0].url;\n\n            return createTrackObject(id, songName, artistNames, imgURL);\n\n        });\n\n        // update state with new array\n        this.setState({\n            \"songList\": newTrackArray\n        });\n\n    }\n\n    /**\n     * Parses array of songs in state and converts them into JSX elements.\n     * @returns {Array} array of SpotifySong Components\n     */\n    renderSongList() {\n\n        const {songList, hasSearched} = this.state;\n\n        if (songList.length === 0 && hasSearched) {\n\n            return <h3 className={MSG_IDENTIFIER}>No songs found. Try something else.</h3>;\n\n        }\n\n        return songList.map(song => <SpotifySong\n                name={song.name}\n                artist={song.artist}\n                imgURL={song.img}\n                id={song.id}\n                key={song.id}\n                handleClick={() => this.props.selectSong(song)}\n            />);\n\n    }\n\n    // renders a HUDSearchBar and a list of songs\n    render() {\n\n        return(\n            <div className=\"hud-song-search-outer-container\">\n                <div className=\"hud-song-search-inner-container\">\n                    <HUDSearchBar\n                        searchSongsWithQuery={input => this.spotifyService.search(this.filterReceivedJSON, input)}\n                    />\n                    {this.renderSongList()}\n                    <HUDButton\n                        text={\"<\"}\n                        type={HUDButtonTypesEnum.RETURN}\n                        onClick={this.props.onReturn}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n}\n\n// default props\nHUDSongSearchMenu.defaultProps = {\n    \"spotifyService\": null,\n    \"selectSong\": song => {\n        console.error(\"Couldn't select song. No handler passed\", song);\n    },\n    \"onReturn\": () => {\n        console.error(\"No return button handler passed.\");\n    }\n};\n\n// prop type constraints\nHUDSongSearchMenu.propTypes = {\n    \"spotifyService\": PropTypes.object,\n    \"selectSong\": PropTypes.func,\n    \"onReturn\": PropTypes.func\n};\n\nexport default HUDSongSearchMenu;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport HUDButton from \"../../components/hud/HUDButton\";\nimport \"../../css/hud/HUDMainMenu.css\";\n\n/**\n * HUD element that wraps all objects in main menu. Two types of main menu can exist:\n * pre and post login.\n * @param {Object} props react props\n * @constructor\n */\nconst HUDMainMenu = props => {\n\n    const {\n        hasLoggedIn,\n        onSongSelectRequest,\n        onLoginRequest,\n        onAboutPageRequest,\n        onLeaderboardsPageRequest\n    } = props;\n\n    // // // BUTTONS // // //\n    const spotifyLoginButton = <HUDButton\n        text=\"Spotify Login\"\n        onClick={onLoginRequest}\n    />;\n\n    const selectSongButton = <HUDButton\n        text=\"Select Song\"\n        onClick={onSongSelectRequest}\n    />;\n\n    const aboutButton = <HUDButton\n        text=\"About\"\n        onClick={onAboutPageRequest}\n    />;\n\n    const leaderboardsButton = <HUDButton\n        text=\"Leaderboards\"\n        onClick={onLeaderboardsPageRequest}\n    />;\n\n    // determines which top button will be rendered\n    const mainButton = hasLoggedIn ? selectSongButton : spotifyLoginButton;\n\n    return (\n\n        <div className=\"hud-main-menu-outer-container\">\n            <div className=\"hud-main-menu-button-container\">\n                {mainButton}\n                {aboutButton}\n                {leaderboardsButton}\n            </div>\n        </div>\n\n    );\n\n};\n\n// prop type constraints\nHUDMainMenu.propTypes = {\n    \"hasLoggedIn\": PropTypes.bool,\n    \"onSongSelectRequest\": PropTypes.func,\n    \"onLoginRequest\": PropTypes.func,\n    \"onAboutPageRequest\": PropTypes.func,\n    \"onLeaderboardsPageRequest\": PropTypes.func\n};\n\n// default properties\nHUDMainMenu.defaultProps = {\n    \"hasLoggedIn\": false,\n    \"onSongSelectRequest\": () => {\n        throw new Error(\"No handler passed.\");\n    },\n    \"onLoginRequest\": () => {\n        throw new Error(\"No handler passed.\");\n    },\n    \"onAboutPageRequest\": () => {\n        throw new Error(\"No handler passed.\");\n    },\n    \"onLeaderboardsPageRequest\": () => {\n        throw new Error(\"No handler passed.\");\n    }\n};\n\nexport default HUDMainMenu;","\n/**\n * Defines handled transitions.\n * @type {{}}\n */\nconst TransitionEnums = {\n    \"IN\": \"IN\",\n    \"OUT\": \"OUT\"\n};\n\n/**\n * Defines default emissions for a transition subject.\n * @type {{in: Transition.in, out: Transition.out}}\n */\nconst Transition = {\n    \"in\": subject => {\n        subject.next({\n            \"position\": TransitionEnums.IN\n        });\n    },\n    \"out\": subject => {\n        subject.next({\n            \"position\": TransitionEnums.OUT\n        });\n    }\n};\n\nexport {\n    TransitionEnums,\n    Transition\n};","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {TransitionEnums} from \"../../utils/TransitionUtils\";\nimport \"../../css/GenericTransitionWrapper.css\";\n\n/**\n * Component responsible for generating a wrapper DIV with properties that allow\n * for controllable transition in and out of screen, with the ability to track\n * the beginning and end of each transition independently.\n *\n * Transition types are not specified, and are expected to be passed as an object\n * containing all CSS properties that represent either IN or OUT.\n *\n * @param {Object} props should contain functions for handling end of transitions, and definitions for changes that\n * entail IN or OUT states.\n * @constructor\n */\nclass GenericTransitionWrapper extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // define IN and OUT attributes.\n        const {\n            IN,\n            OUT,\n            transitionRequestObservable\n        } = props;\n\n        // determines whether wrapped element starts in or out of the viewport\n        this.state = {\n            \"position\": props.shouldMountIn ? TransitionEnums.IN : TransitionEnums.OUT,\n            \"currentStyle\": props.shouldMountIn ? IN : OUT\n        };\n\n        // handle transition requests\n        transitionRequestObservable.delay(250).subscribe(msg => {\n\n            const {\n                position\n            } = msg;\n\n            if (position === TransitionEnums.IN) {\n\n                this.handleTransitionStart(position);\n                this.setState({\n                    position,\n                    \"currentStyle\": props.IN\n                });\n\n            } else if (position === TransitionEnums.OUT) {\n\n                this.handleTransitionStart(position);\n                this.setState({\n                    position,\n                    \"currentStyle\": props.OUT\n                });\n\n            } else console.error(\"Invalid position request. Position passed: \", position);\n\n        });\n\n        // bind functions\n        this.handleTransitionStart = this.handleTransitionStart.bind(this);\n        this.handleTransitionEnd = this.handleTransitionEnd.bind(this);\n\n    }\n\n    componentDidMount() {\n\n        const {\n            onMount\n        } = this.props;\n\n        if (onMount) onMount();\n\n    }\n\n    /**\n     * Handles start of transition, and calls appropriate handler prop.\n     * @param {TransitionEnums} position Enumeration designating desired change\n     * @returns {void}\n     */\n    handleTransitionStart(position) {\n\n        switch(position) {\n\n            case TransitionEnums.IN:\n                // break if no assigned functions\n                if (!this.props.onStartTransitionIn) break;\n                this.props.onStartTransitionIn();\n                break;\n            case TransitionEnums.OUT:\n                // break if no assigned functions\n                if (!this.props.onStartTransitionOut) break;\n                this.props.onStartTransitionOut();\n                break;\n            default:\n                console.error(\"'Position' state not appropriate: \", position);\n                break;\n        }\n\n    }\n\n    /**\n     * Handles end of transition, and calls appropriate handler prop.\n     * @returns {void}\n     */\n    handleTransitionEnd() {\n\n        switch(this.state.position) {\n\n            case TransitionEnums.IN:\n                if (!this.props.onEndTransitionIn) break;\n                this.props.onEndTransitionIn();\n                break;\n            case TransitionEnums.OUT:\n                if (!this.props.onEndTransitionOut) break;\n                this.props.onEndTransitionOut();\n                break;\n            default:\n                console.error(\"'Position' state not appropriate: \", this.state.position);\n                break;\n        }\n\n    }\n\n    render() {\n        return (\n            <div\n                className={\"transition-wrapper\"}\n                style={this.state.currentStyle}\n                onTransitionEnd={this.handleTransitionEnd}\n            >\n                {this.props.children}\n            </div>\n        );\n    }\n\n\n}\n\nGenericTransitionWrapper.propTypes = {\n    \"IN\": PropTypes.object.isRequired,\n    \"OUT\": PropTypes.object.isRequired,\n    \"shouldMountIn\": PropTypes.bool,\n    \"children\": PropTypes.any,\n    \"onStartTransitionIn\": PropTypes.func,\n    \"onStartTransitionOut\": PropTypes.func,\n    \"onEndTransitionIn\": PropTypes.func,\n    \"onEndTransitionOut\": PropTypes.func,\n    \"transitionRequestObservable\": PropTypes.any.isRequired,\n    \"onMount\": PropTypes.func\n};\n\nGenericTransitionWrapper.defaultProps = {\n    \"onMount\": () => console.log(\"Component mounted.\"),\n    \"onStartTransitionIn\": null,\n    \"onStartTransitionOut\": null,\n    \"onEndTransitionIn\": null,\n    \"onEndTransitionOut\": null,\n    \"shouldMountIn\": false\n};\n\nexport default GenericTransitionWrapper;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport GenericTransitionWrapper from \"./GenericTransitionWrapper\";\nimport {Transition} from \"../../utils/TransitionUtils\";\n\nconst FadeTransition = props => {\n\n    const {\n        shouldMountIn,\n        onStartTransitionIn,\n        onStartTransitionOut,\n        onEndTransitionIn,\n        onEndTransitionOut,\n        transitionRequestObservable,\n        onMount\n    } = props;\n\n    // default to transitioning in on mount\n    const mountHandler = onMount ? onMount : () => Transition.in(transitionRequestObservable);\n\n    return (\n        <GenericTransitionWrapper\n            OUT={{\"opacity\": 0}}\n            IN={{\"opacity\": 1}}\n            shouldMountIn={shouldMountIn}\n            transitionRequestObservable={transitionRequestObservable}\n            onMount={mountHandler}\n            onEndTransitionIn={onEndTransitionIn}\n            onEndTransitionOut={onEndTransitionOut}\n            onStartTransitionIn={onStartTransitionIn}\n            onStartTransitionOut={onStartTransitionOut}\n        >{props.children}</GenericTransitionWrapper>\n\n    );\n\n};\n\nFadeTransition.propTypes = {\n    \"onStartTransitionIn\": PropTypes.func,\n    \"onStartTransitionOut\": PropTypes.func,\n    \"onEndTransitionIn\": PropTypes.func,\n    \"onEndTransitionOut\": PropTypes.func,\n    \"onMount\": PropTypes.func,\n    \"transitionRequestObservable\": PropTypes.any.isRequired,\n    \"shouldMountIn\": PropTypes.bool,\n    \"children\": PropTypes.any\n};\n\nFadeTransition.defaultProps = {\n    \"shouldMountIn\": false\n};\n\nexport default FadeTransition;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport GenericTransitionWrapper from \"./GenericTransitionWrapper\";\nimport {Transition} from \"../../utils/TransitionUtils\";\n\nconst SlideTransition = props => {\n\n    const {\n        shouldMountIn,\n        onStartTransitionIn,\n        onStartTransitionOut,\n        onEndTransitionIn,\n        onEndTransitionOut,\n        transitionRequestObservable,\n        onMount\n    } = props;\n\n    // default to transitioning in on mount\n    const mountHandler = onMount ? onMount : () => Transition.in(transitionRequestObservable);\n\n    return (\n        <GenericTransitionWrapper\n            OUT={{\"left\": \"100%\"}}\n            IN={{\"left\": \"0\"}}\n            shouldMountIn={shouldMountIn}\n            transitionRequestObservable={transitionRequestObservable}\n            onMount={mountHandler}\n            onEndTransitionIn={onEndTransitionIn}\n            onEndTransitionOut={onEndTransitionOut}\n            onStartTransitionIn={onStartTransitionIn}\n            onStartTransitionOut={onStartTransitionOut}\n        >{props.children}</GenericTransitionWrapper>\n\n    );\n\n};\n\nSlideTransition.propTypes = {\n    \"onStartTransitionIn\": PropTypes.func,\n    \"onStartTransitionOut\": PropTypes.func,\n    \"onEndTransitionIn\": PropTypes.func,\n    \"onEndTransitionOut\": PropTypes.func,\n    \"onMount\": PropTypes.func,\n    \"transitionRequestObservable\": PropTypes.any.isRequired,\n    \"shouldMountIn\": PropTypes.bool,\n    \"children\": PropTypes.any\n};\n\nSlideTransition.defaultProps = {\n    \"shouldMountIn\": false\n};\n\nexport default SlideTransition;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpotifySong from \"../../components/hud/SpotifySong\";\nimport HUDButton, {HUDButtonTypesEnum} from \"../../components/hud/HUDButton\";\nimport \"../../css/hud/HUDSongSelect.css\";\n\n/**\n * Component that displays selected song in the center of the screen, and that\n * progresses the flow of the application towards fetching data from a specific\n * track necessary for level generation, as well as updating game state.\n * @param {Object} props react props\n * @returns {*}\n * @constructor\n */\nconst HUDSongSelectMenu = props => {\n\n    const {\n        songObject,\n        onConfirmation\n    } = props;\n\n    const {\n        name,\n        id,\n        img,\n        artist\n    } = songObject;\n\n    return (\n        <div className=\"hud-song-select-outer-container\">\n                <SpotifySong\n                    size=\"large\"\n                    name={name}\n                    id={id}\n                    imgURL={img}\n                    artist={artist}\n                />\n                <HUDButton text=\"Generate Level\" onClick={onConfirmation} />\n                <HUDButton text={\"<\"} type={HUDButtonTypesEnum.RETURN} onClick={props.onReturn}/>\n        </div>\n    );\n\n};\n\nHUDSongSelectMenu.propTypes = {\n    \"songObject\": PropTypes.shape({\n        \"name\": PropTypes.string.isRequired,\n        \"id\": PropTypes.string.isRequired,\n        \"img\": PropTypes.string,\n        \"artist\": PropTypes.array.isRequired\n    }),\n    \"onConfirmation\": PropTypes.func.isRequired,\n    \"onReturn\": PropTypes.func.isRequired\n};\n\nexport default HUDSongSelectMenu;","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Subject} from \"rxjs\";\n\nimport HUDSongSearchMenu from \"../pages/hud/HUDSongSearchMenu\";\nimport HUDMainMenu from \"../pages/hud/HUDMainMenu\";\nimport FadeTransition from \"../components/transition/FadeTransition\";\n\nimport {Transition} from \"./TransitionUtils\";\nimport SlideTransition from \"../components/transition/SlideTransition\";\nimport HUDSongSelectMenu from \"../pages/hud/HUDSongSelectMenu\";\n\n/**\n * Utility responsible for unifying and managing all HUD menus and components properly.\n * Should be initialized with reference to the page that will be rendering the error and menu overlay.\n */\nclass HUDOverlayManager extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // observer that notifies game of state changes coming from HUD interactions\n        this.gameStateManager = props.gameStateManager;\n\n        // will initialize the menu stack with main menu assuming login has been performed\n        this.state = {\n            \"errorComponent\": null,\n            \"menuStack\": []\n        };\n\n        // binding functions\n        this.mountSongSearchMenu = this.mountSongSearchMenu.bind(this);\n        this.mountSongSelectMenu = this.mountSongSelectMenu.bind(this);\n        this.popMenu = this.popMenu.bind(this);\n    }\n\n    componentDidMount() {\n\n        // initialize transition observable\n        const transitionObservable = new Subject();\n\n        const handleSongSelectRequest = () => {\n            // first transition main menu out\n            Transition.out(transitionObservable);\n\n            // transition song search menu in\n            this.mountSongSearchMenu(transitionObservable);\n        };\n\n        // now that all is well and mounted, update menu stack with appropriate components\n        this.setState({\n            \"menuStack\": [\n                <FadeTransition\n                    transitionRequestObservable={transitionObservable}\n                    key={0}\n                >\n                    <HUDMainMenu\n                        hasLoggedIn={true}\n                        onSongSelectRequest={handleSongSelectRequest}\n                    />\n                </FadeTransition>\n            ]\n        });\n\n    }\n\n    // mounts menu off screen and transitions both menus appropriately\n    mountSongSearchMenu(prevScreenTransitionObservable) {\n\n        // initialize transition observable\n        const transitionObservable = new Subject();\n\n        const handleSongSelect = songObject => {\n            Transition.out(transitionObservable);\n            this.mountSongSelectMenu(songObject, transitionObservable);\n        };\n\n        const handleReturn = () => {\n            Transition.out(transitionObservable);\n            this.popMenu();\n            Transition.in(prevScreenTransitionObservable);\n        };\n\n        // initialize jsx object\n        const songSearchMenu =\n            <SlideTransition\n                transitionRequestObservable={transitionObservable}\n                key={1}\n            >\n                <HUDSongSearchMenu\n                    spotifyService={this.props.spotifyService}\n                    selectSong={handleSongSelect}\n                    onReturn={handleReturn}\n                />\n            </SlideTransition>;\n\n        // mount\n        this.setState(oldState => ({\n            \"menuStack\": [\n                ...oldState.menuStack,\n                songSearchMenu\n            ]\n        }));\n\n    }\n\n    // mounts song select\n    mountSongSelectMenu(songObject, prevScreenTransitionObservable) {\n\n        // initialize transition observable\n        const transitionObservable = new Subject();\n\n        const handleConfirmation = () => {\n            Transition.out(transitionObservable);\n\n            this.props.spotifyService.getAudioAnalysisAndFeatures(songObject.id, object => console.log(object));\n        };\n\n        const handleReturn = () => {\n            Transition.out(transitionObservable);\n            this.popMenu();\n            Transition.in(prevScreenTransitionObservable);\n        };\n\n        // initialize jsx object\n        const songSearchMenu =\n            <SlideTransition\n                transitionRequestObservable={transitionObservable}\n                key={2}\n            >\n                <HUDSongSelectMenu\n                    songObject={songObject}\n                    onConfirmation={handleConfirmation}\n                    onReturn={handleReturn}\n                />\n            </SlideTransition>;\n\n        // mount\n        this.setState(oldState => ({\n            \"menuStack\": [\n                ...oldState.menuStack,\n                songSearchMenu\n            ]\n        }));\n\n    }\n\n    // unmounts top screen\n    popMenu() {\n        this.setState(oldState => {\n\n            const oldStack = oldState.menuStack;\n            oldStack.pop();\n\n            return {\"menuStack\": [...oldStack]};\n\n        }, () => console.log(\"Screen popped.\"));\n    }\n\n    render() {\n\n        // if user has not logged in yet, display incomplete main menu as the only object on screen\n        if (!this.props.hasLoggedIn) {\n\n            // initialize transition observable\n            const transitionObservable = new Subject();\n\n            /*\n             * TODO: assign appropriate fadeout handlers according to button press\n             * let fadeOutHandler = () => console.log(\"Fade out handler not set for main menu.\");\n             */\n            const onMount = () => Transition.in(transitionObservable);\n\n            return (\n                <div>\n                    <FadeTransition\n                        transitionRequestObservable={transitionObservable}\n                        // onEndTransitionOut={fadeOutHandler}\n                        onMount={onMount}\n                    >\n                        <HUDMainMenu\n                            onLoginRequest={this.props.spotifyService.login}\n                            hasLoggedIn={false}\n                        />\n                    </FadeTransition>\n                </div>\n            );\n\n        }\n\n        return(\n            <div>\n                {this.state.errorComponent}\n                {this.state.menuStack}\n            </div>\n        );\n    }\n\n}\n\nHUDOverlayManager.propTypes = {\n  \"gameStateManager\": PropTypes.object,\n  \"spotifyService\": PropTypes.object,\n  \"hasLoggedIn\": PropTypes.bool\n};\n\nexport default HUDOverlayManager;","import React, {Component} from \"react\";\nimport SpotifyService from \"../utils/SpotifyService\";\nimport HUDOverlayManager from \"../utils/HUDOverlayManager\";\n\nconst APP_NAME = \"Tune Mountain\";\n\nclass App extends Component {\n\n\tconstructor(props) {\n\n\t\tsuper(props);\n\n\t\tconst spotifyService = new SpotifyService(`${APP_NAME} Web Player`);\n\t\tconst hasLoggedIn = false;\n\t\tspotifyService.stateNotifier.subscribe(state => console.log(state));\n\t\tspotifyService.stateNotifier\n\t\t\t.filter(notification => notification.state === \"LOGGED_IN\")\n\t\t\t.subscribe(() => this.setState({\"hasLoggedIn\": true}));\n\n\t\t// init player when sdk is ready\n\n\t\tthis.spotifyService = spotifyService;\n\n\t\tthis.state = {\n\t\t\thasLoggedIn,\n\t\t\t\"currentMenu\": null\n\t\t};\n\n\t}\n\n\tcomponentDidMount() {\n\n\t}\n\n\trender() {\n\n\t\treturn(\n\t\t\t<HUDOverlayManager\n\t\t\t\tspotifyService={this.spotifyService}\n\t\t\t\thasLoggedIn={this.state.hasLoggedIn}\n\t\t\t/>\n\t\t);\n\n\t}\n\n}\n\nexport default App;","import React from \"react\";\nimport App from \"./pages/App\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}